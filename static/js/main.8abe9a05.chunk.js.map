{"version":3,"sources":["components/CountDownAndHomeCastle/CountDownAndHomeCastle.scss","router.ts","components/CountDownAndHomeCastle/CountDownAndHomeCastle.tsx","components/Home/Home.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","createRouter","defineRoute","RouteProvider","useRoute","routes","CountDownAndHomeCastle","params","route","useAsyncAbortable","useCallback","abortSignal","a","Promise","resolve","setTimeout","styles","transitionDuration","aborted","home","replace","buttonCallback","execute","isTransitioningToHome","loading","className","name","onClick","Home","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,mBAAqB,S,oKCCYC,YAAa,CAC9D,UAAaC,YAAY,KACzB,KAAQA,YAAY,WAFPC,E,EAAAA,cAAeC,E,EAAAA,SAAUC,E,EAAAA,O,8CCK3BC,EAER,SAAAC,GAAW,IAENC,EAAUD,EAAVC,MAFK,EAOTC,YACFC,sBAAW,uCAAC,WAAOC,GAAP,SAAAC,EAAA,sEAEJ,IAAIC,SACR,SAAAC,GAAO,OAAIC,WACTD,EACAE,IAAOC,uBALD,WASNN,EAAYO,QATN,iDAaVb,EAAOc,OAAOC,UAbJ,2CAAD,sDAeR,IACH,GACA,CACE,gBAAkB,EAClB,iBAAmB,IAtBZC,EALE,EAKXC,QACSC,EANE,EAMXC,QAyBF,OACE,yBACEC,UAAS,oDAEU,SAAfjB,EAAMkB,MAAmBH,EAAwB,OAAS,GAFrD,aAMT,yBAAKE,UAAU,UACX,WAEA,OAAQjB,EAAMkB,MACZ,IAAK,YAAa,OAAO,mDACzB,IAAK,OAAQ,OAAO,gDAJtB,IAUY,cAAflB,EAAMkB,MACL,yBAAKD,UAAU,sBACb,8EACA,2FACA,4BAAQE,QAASN,GAAjB,mBC1DGO,G,MAER,kBAAK,wBAAIH,UAAU,QAAd,kBCFGI,EAAgB,WAE3B,IAAMrB,EAAQJ,IAEd,OACE,oCACI,WACA,OAAQI,EAAMkB,MACZ,IAAK,YACL,IAAK,OACH,OAAO,kBAAC,EAAD,CAAwBlB,MAAOA,IACxC,QAAS,OAAO,MALlB,GAQA,WACA,OAAQA,EAAMkB,MACZ,IAAK,OAAQ,OAAO,kBAAC,EAAD,CAAMlB,MAAOA,IACjC,QAAS,OAAO,MAHlB,KCPYsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAClC,EAAD,KACE,kBAAC,EAAD,QAGJmC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8abe9a05.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"transitionDuration\":\"2000\"};","import { createRouter, defineRoute } from \"type-route\";\n\nexport const { RouteProvider, useRoute, routes } = createRouter({\n  \"countdown\": defineRoute(\"/\"),\n  \"home\": defineRoute(\"/home\")\n});\n\n","\nimport React, { useCallback } from \"react\";\nimport styles from \"./CountDownAndHomeCastle.scss\";\nimport { routes } from \"../../router\";\nimport { useAsyncAbortable } from \"react-async-hook\";\nimport type { Route } from \"type-route\";\n\nexport const CountDownAndHomeCastle: React.FC<{\n  route: Route<typeof routes.home> | Route<typeof routes.countdown>;\n}> = params => {\n\n  const { route } = params;\n\n  const {\n    execute: buttonCallback,\n    loading: isTransitioningToHome\n  } = useAsyncAbortable(\n    useCallback(async (abortSignal: AbortSignal) => {\n\n      await new Promise(\n        resolve => setTimeout(\n          resolve,\n          styles.transitionDuration\n        )\n      );\n\n      if (abortSignal.aborted) {\n        return;\n      }\n\n      routes.home().replace();\n\n    }, []),\n    [],\n    {\n      \"executeOnMount\": false,\n      \"executeOnUpdate\": false\n    }\n  );\n\n  return (\n    <div\n      className={`\n        CountDownAndHomeCastle\n        ${route.name === \"home\" || isTransitioningToHome ? \"home\" : \"\"}\n      `}\n    >\n\n      <div className=\"castle\">\n        {(() => {\n\n          switch (route.name) {\n            case \"countdown\": return <p>Coutdown placeholder</p>;\n            case \"home\": return <p>Home placeholder</p>;\n          }\n\n        })()}\n      </div>\n\n      {route.name === \"countdown\" &&\n        <div className=\"countdownSidePanel\">\n          <h1>Le Funcamp R, de la nostalgie, du fun et du R!</h1>\n          <h2>...saurez-vous percer les mystères du royaume de Statis?</h2>\n          <button onClick={buttonCallback}>Découvrir</button>\n        </div>\n      }\n\n    </div>\n  );\n\n};\n\n\n","import \"./Home.scss\";\nimport React from \"react\";\nimport { Route } from \"type-route\";\nimport { routes } from \"../../router\";\n\nexport const Home: React.FC<{\n    route: Route<typeof routes.home>\n}> = ()=> <h1 className=\"Home\">Home content</h1>;","import React from \"react\";\nimport { useRoute } from \"../router\";\nimport { CountDownAndHomeCastle } from \"./CountDownAndHomeCastle/CountDownAndHomeCastle\";\nimport { Home } from \"./Home/Home\";\n\nexport const App: React.FC = () => {\n\n  const route = useRoute();\n\n  return (\n    <>\n      {(() => {\n        switch (route.name) {\n          case \"countdown\":\n          case \"home\":\n            return <CountDownAndHomeCastle route={route} />\n          default: return null;\n        }\n      })()}\n      {(() => {\n        switch (route.name) {\n          case \"home\": return <Home route={route}/>;\n          default: return null;\n        }\n      })()}\n    </>\n  );\n\n};\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport { App } from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { RouteProvider } from \"./router\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RouteProvider>\n      <App />\n    </RouteProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}